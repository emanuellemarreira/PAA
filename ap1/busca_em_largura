from collections import deque
class Graph:
    def __init__(self, edges, n):
        self.adjList = [[] for _ in range(n)]
        for (src, dest) in edges:
            self.adjList[src].append(dest)

def BFS(graph, v, discovered):
    q = deque()
    discovered[v] = True
    q.append(v)
    while q:
        v = q.popleft()
        print(v, end=' ')
        for u in graph.adjList[v]:
            if not discovered[u]:
                discovered[u] = True
                q.append(u)


if __name__ == '__main__':

    edges = [
        (0, 3),(0, 6),(6,3),(0,5),(5,7),(7,0),(7,1),(1,2),(1,4),(4,2)
    ]
    n = 8
    graph = Graph(edges, n)
    discovered = [False] * n
    for i in range(n):
        if not discovered[i]:
            BFS(graph, i, discovered)